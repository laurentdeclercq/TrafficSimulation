{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12880\viewh12120\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 TRAFFIC ASSIGNMENT - 
\fs28 LAURENT DECLERCQ\

\fs24 \ulnone \

\fs28 BEHAVIOUR
\fs24 \
\
The program behaves as follows:
\b0 \
- Main creates a simulation\
- the simulation creates the city and the carRegistry and adds vehicles to both, based on the input files inside /Config_Files/\
- the simulation runs (iterates the CarRegistry and the city) until all cars finished (possibly finished by a maximum number of iterations, as given in main)\
\

\b The Iterations:\

\b0 - CarRegistry : increments travelTime for all cars that are not finished yet\
\
- City: \
	- recomputes the travel times from each CR to its neighbours (distance + current traffic)\
	- makes vehicles go from street to next CR when they are ready to do so and the CR is not full at that side\
	- makes vehicles go from CR to next street, based on the optimal path of the vehicle. That optimal path can be 	recalculated EVERY iteration when the DynamicPath-switch is turned on inside the vehicle (cf input-file)\
	- each vehicle that reached destination is dropped from the CR
\b \

\b0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0

\b\fs28 \cf0 ORGANIZATION / STRUCTURE
\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 \

\b TRAFFIC\

\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 CarRegistry = DictionaryTree<String, Vehicle> (dictionary based on binaryTree)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 City = matrix AND graph of CR with each CR linked to both structures\
Vehicle = has Stack of followedRoute and Stack of futureRoute\
CR = array of TrafficLights AND array of Streets (reachable with enum Orientation)\
TrafficLight = PriorityQueue<Vehicle> where Vehicles are compared based on priority first\
Street = CircularVector<VehiclePair> with VehiclePair a pair of vehicle with its remaining time in the street\
\

\b GENERAL DATASTRUCTURES
\b0 \
Matrix = nested CircularVector\
Graph = circularVector of nodes (that in turn contain a circular vector of Edges)\
Stack = circularVector\
DictionaryTree = Dictionary that uses binaryTree of dictionaryPairs\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\sl264\slmult1\pardirnatural\partightenfactor0
\cf0 PriorityQueue ( = BinaryTree of PriorityPair)\
\
Beware: TO TAKE ADVANTAGE OF THE BINARY TREES inside CAR REGISTRY, better to randomize the lines inside the input file !!}